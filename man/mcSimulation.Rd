% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/mcSimulation.R
\name{mcSimulation}
\alias{mcSimulation}
\title{Perform a Monte Carlo Simulation.}
\usage{
mcSimulation(estimate, model_function, ..., numberOfSimulations,
  randomMethod = "calculate", functionSyntax = "data.frameNames")
}
\arguments{
\item{estimate}{Filename or  estimate object representing the joint probability distribution of the input variables.}

\item{model_function}{A numeric function; The function that describes the value of a certain project.}

\item{...}{Optional arguments of \code{model_function}.}

\item{numberOfSimulations}{The number of Monte Carlo simulations to be run.}

\item{randomMethod}{\code{character}. The method to be used to sample the distribution representing the input estimate.}

\item{functionSyntax}{\code{character}. The syntax which has to be used to implement the model function. Possible
values are \code{globalNames}, \code{data.frameNames} or \code{matrixNames}. Details are given below.}
}
\value{
An object of class \code{mcSimulation}.
\tabular{ll}{
 \code{phi} \tab an l-variate probability distribution\cr
 \code{x}   \tab a dataframe containing the sampled \eqn{x -} values\cr
 \code{y}   \tab a dataframe containing the simulated \eqn{y -} values
}
}
\description{
This method solves the following problem. Given a multivariate random variable
\eqn{x = (x_1,\ldots,x_k)} with joint probability distribution \eqn{P}, i.e.
\deqn{x \sim P.}{x ~ P} Then the continuous function
 \deqn{f:R^k \rightarrow R^l, y = f(x)}{f:R^k --> R^l, y = f(x)}
defines another random variable with distribution
 \deqn{y \sim f(P).}{y ~ f(P).}
Given a probability density \eqn{\rho} of x that defines \eqn{P} the problem is the determination of the
probability density \eqn{\phi} that defines \eqn{f(P)}. This method samples the probability density \eqn{\phi}
of \eqn{y} by Monte Carlo simulation.
}
\details{
If \code{functionSyntax="globalNames"}, the variable names used in the definition of \code{model_function} have
 to be defined globally. \code{model_function} has to be of the form \code{function(x,varnames)}. If
 \code{functionSyntax="data.frameNames"}, the model function is constructed, e.g. like this:\cr
 \code{
   profit<-function(x){
     x[["revenue"]]-x[["costs"]]
   }
 }
 or like this:
 \code{
   profit<-function(x){
     x$revenue-x$costs
   }
 }
 If \code{functionSyntax="matrixNames"}, the model function is constructed, e.g. like this:\cr
 \code{
   profit<-function(x){
     x[,"revenue"]-x[,"costs"]
   }
 }
}
\examples{
#############################################################
 # Example 1 (Creating the estimate from the command line):
 #############################################################
 # Create the estimate object:
 variable=c("revenue","costs")
 distribution=c("norm","norm")
 lower=c(10000,  5000)
 upper=c(100000, 50000)
 costBenefitEstimate<-estimate(variable, distribution, lower, upper)
 # (a) Define the model function without name for the return value:
 profit1<-function(x){
   x$revenue-x$costs
 }
 # Perform the Monte Carlo simulation:
 predictionProfit1<-mcSimulation( estimate=costBenefitEstimate,
                                 model_function=profit1,
                                 numberOfSimulations=100000,
                                 functionSyntax="data.frameNames")
 # Show the simulation results:
 print(summary(predictionProfit1))
 hist(predictionProfit1,xlab="Profit")
 #############################################################
 # (b) Define the model function with a name for the return value:
 profit1<-function(x){
   list(Profit=x$revenue-x$costs)
 }
 # Perform the Monte Carlo simulation:
 predictionProfit1<-mcSimulation( estimate=costBenefitEstimate,
                                 model_function=profit1,
                                 numberOfSimulations=100000,
                                 functionSyntax="data.frameNames")
 # Show the simulation results:
 print(summary(predictionProfit1, classicView=TRUE))
 hist(predictionProfit1)
 #########################################################
 # (c) Using global names in the model function syntax
 #	(CAVE: currently slow!):
 profit1<-function(){
   list(Profit=revenue-costs)
 }
 # Perform the Monte Carlo simulation:
 predictionProfit1<-mcSimulation( estimate=costBenefitEstimate,
                                 model_function=profit1,
                                 numberOfSimulations=10000,
                                 functionSyntax="globalNames")
 # Show the simulation results:
 print(summary(predictionProfit1, probs=c(0.05,0.50,0.95)))
 hist(predictionProfit1)

 #############################################################
 # Example 2(Reading the estimate from file):
 #############################################################
 # Define the model function:
 profit2<-function(x){
   Profit<-x[["sales"]]*(x[["productprice"]] - x[["costprice"]])
   list(Profit=Profit)
 }
 # Read the estimate of sales, productprice and costprice from file:
 inputFileName=system.file("extdata","profit-4.csv",package="decisionSupport")
 parameterEstimate<-estimate_read_csv(fileName=inputFileName)
 print(parameterEstimate)
 # Perform the Monte Carlo simulation:
 predictionProfit2<-mcSimulation( estimate=parameterEstimate,
                                 model_function=profit2,
                                 numberOfSimulations=100000,
                                 functionSyntax="data.frameNames")
 # Show the simulation results:
 print(summary(predictionProfit2))
 hist(predictionProfit2)
}
\seealso{
\code{\link{print.mcSimulation}}, \code{\link{summary.mcSimulation}}, \code{\link{hist.mcSimulation}},
 \code{\link{estimate}}, \code{\link{random.estimate}}
}

