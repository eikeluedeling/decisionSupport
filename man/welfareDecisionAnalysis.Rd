% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/welfareDecisionAnalysis.R
\name{welfareDecisionAnalysis}
\alias{welfareDecisionAnalysis}
\title{Analysis of the Underlying Welfare Based Decision Problem}
\usage{
welfareDecisionAnalysis(estimate, model, numberOfSimulations,
  functionSyntax = "data.frameNames")
}
\arguments{
\item{estimate}{\code{\link{estimate}} object describing the distribution of the input variables.}

\item{model}{either a function or a list with two functions: \code{list(p1,p2)}. In the first case the function is the
net benefit of project approval vs. the status quo. In the second case the element \code{p1} is the function valuing
the first project and the element \code{p2} valueing the second project.}

\item{numberOfSimulations}{integer; number of simulations to be used in the underlying Monte Carlo analysis}

\item{functionSyntax}{function character; function syntax used in the model function(s).}
}
\value{
An object of class \code{welfareDecisionAnalysis} with the following elements:
 \tabular{ll}{
			\code{enbPa} \tab Expected Net Loss (ENL) in case of project approval (PA)\cr
			\code{enbSq} \tab Expected Net Loss (ENL) in case of status quo (SQ)\cr
 		\code{eol}   \tab  Expected Oportunity Loss (EOL)\cr
 		\code{optimalChoice} \tab The optimal choice, i.e. either
 															project approval (PA) or the status quo (SQ)
}
}
\description{
The optimal choice between two different opportunities is calculated. This decision is based on minimizing
the Expected Net Loss (ENL).
}
\details{
This principle is along the line described in Hubbard (2014). The Expected Opportunity Loss (EOL) is defined as the
Expected Net Loss (ENL) for the best decision. The best decision minimises the ENL. The EOL is always conditional on the available
information (I): EOL=EOL(I). Here, the available information is the supplied estimate. One can show that in the case of two
alternatives, minimization of EOL is equivalent to maximization of the Expected Net Benefit.
}
\examples{
#############################################################
# Example 1 (Creating the estimate from the command line):
#############################################################
# Create the estimate object:
variable=c("revenue","costs")
distribution=c("posnorm","posnorm")
lower=c(10000,  5000)
upper=c(100000, 50000)
costBenefitEstimate<-estimate(variable, distribution, lower, upper)
# (a) Define the model function without name for the return value:
profit<-function(x){
 x$revenue-x$costs
}
# Perform the decision analysis:
myAnalysis<-welfareDecisionAnalysis(estimate=costBenefitEstimate,
                                    model=profit,
                                    numberOfSimulations=100000,
                                    functionSyntax="data.frameNames")
# Show the analysis results:
print(summary((myAnalysis)))
#############################################################
# (b) Define the model function with a name for the return value:
profit<-function(x){
 list(Profit=x$revenue-x$costs)
}
# Perform the decision analysis:
myAnalysis<-welfareDecisionAnalysis(estimate=costBenefitEstimate,
                                    model=profit,
                                    numberOfSimulations=100000,
                                    functionSyntax="data.frameNames")
# Show the analysis results:
print(summary((myAnalysis)))
#############################################################
# (c) Two decsion variables:
decisionModel<-function(x){
 list(Profit=x$revenue-x$costs,
   Costs=-x$costs)
}
# Perform the decision analysis:
myAnalysis<-welfareDecisionAnalysis(estimate=costBenefitEstimate,
                                    model=decisionModel,
                                    numberOfSimulations=100000,
                                    functionSyntax="data.frameNames")
# Show the analysis results:
print(summary((myAnalysis)))
}
\seealso{
\code{\link{mcSimulation}}, \code{\link{estimate}}, \code{\link{summary.welfareDecisionAnalysis}}
}

