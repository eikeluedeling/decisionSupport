% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/eviSimulation.R
\name{eviSimulation}
\alias{eviSimulation}
\title{Expected Value of Information (EVI) Simulation}
\usage{
eviSimulation(model, currentEstimate, prospectiveEstimate, numberOfSimulations,
  functionSyntax = "data.frameNames")
}
\arguments{
\item{model}{either a function or a list with two functions: \code{list(p1,p2)}. In the first case the function is the
net benefit of project approval vs. the status quo. In the second case the element \code{p1} is the function valuing
the first project and the element \code{p2} valueing the second project.}

\item{currentEstimate}{\code{\link{estimate}} object describing the distribution of the input variables as currently estmated.}

\item{numberOfSimulations}{integer; number of simulations to be used in the underlying Monte Carlo analysis}

\item{functionSyntax}{function character; function syntax used in the model function(s).}

\item{prospectiveEstmate}{\code{\link{estimate}} object describing the prospective distribution of the input variables
which could hypothetically achieved by collecting more information, viz. improving the measurement.}
}
\value{
An object of class \code{eviSimulation} with the following elements:
 \tabular{ll}{
			\code{current} \tab \code{\link{welfareDecisionAnalysis}} object for \code{currentEstimate}\cr
			\code{prospective} \tab \code{\link{welfareDecisionAnalysis}} object  for \code{prospectiveEstimate}\cr
 		\code{evi}   \tab  Expected Value of Information (EVI) of gained by the prospective estimate w.r.t.
 								the current estimate
}
}
\description{
The Expected Value of Information (EVI) is calculated based on a Monte Carlo simulation
of the values of two different decision alternatives.
}
\details{
This principle is along the line described in Hubbard (2014). The Expected Value of Information is the decrease in the EOL
 for an information improvement from the current estimate (I_current) to a better prospective (or hypothetical) information (I_prospective):
  EVI := EOL(I_current) - EOL(I_prospective). Thus, the EVI depends on the model for valueing a decision,
  the current information, i.e. the current estimate, and the specification of a hypothetical improvement in information, i.e. a prospective
   estimate.
}
\examples{
#############################################################
# Example 1 Only one prospective estimate:
#############################################################
numberOfSimulations=10000
# Create the estimate object:
variable=c("revenue","costs")
distribution=c("posnorm","posnorm")
lower=c(10000,  5000)
upper=c(100000, 50000)
currentEstimate<-estimate(variable, distribution, lower, upper)
prospectiveEstimate<-currentEstimate
revenueConst<-mean(c(currentEstimate$base["revenue","lower"],currentEstimate$base["revenue","upper"]))
prospectiveEstimate$base["revenue",]<-data.frame(distribution="const",
																								 lower=revenueConst,
																								 upper=revenueConst,
																								 row.names="revenue",
																								 stringsAsFactors=FALSE)
# (a) Define the model function without name for the return value:
profit<-function(x){
	x$revenue-x$costs
}

# Calculate the Expected Value of Information:
eviSimulationResult<-eviSimulation(model=profit,
																	 currentEstimate=currentEstimate,
																	 prospectiveEstimate=prospectiveEstimate,
																	 numberOfSimulations=numberOfSimulations,
																	 functionSyntax="data.frameNames")
# Show the simulation results:
print(summary(eviSimulationResult))
#############################################################
# (b) Define the model function with a name for the return value:
profit<-function(x){
	list(Profit=x$revenue-x$costs)
}
# Calculate the Expected Value of Information:
eviSimulationResult<-eviSimulation(model=profit,
																	 currentEstimate=currentEstimate,
																	 prospectiveEstimate=prospectiveEstimate,
																	 numberOfSimulations=numberOfSimulations,
																	 functionSyntax="data.frameNames")
# Show the simulation results:
print(summary((eviSimulationResult)))
#############################################################
# (c) Two decsion variables:
decisionModel<-function(x){
	list(Profit=x$revenue-x$costs,
			 Costs=-x$costs)
}
# Calculate the Expected Value of Information:
eviSimulationResult<-eviSimulation(model=decisionModel,
																	 currentEstimate=currentEstimate,
																	 prospectiveEstimate=prospectiveEstimate,
																	 numberOfSimulations=numberOfSimulations,
																	 functionSyntax="data.frameNames")
# Show the simulation results:
print(summary((eviSimulationResult)))
#############################################################
# Example 2 A list of prospective estimates:
#############################################################
numberOfSimulations=10000
#  Define the model function with a name for the return value:
profit<-function(x){
	list(Profit=x$revenue-x$costs)
}
# Create the estimate object:
variable=c("revenue","costs")
distribution=c("posnorm","posnorm")
lower=c(10000,  5000)
upper=c(100000, 50000)
currentEstimate<-estimate(variable, distribution, lower, upper)
perfectInformationRevenue<-currentEstimate
revenueConst<-mean(c(currentEstimate$base["revenue","lower"],currentEstimate$base["revenue","upper"]))
perfectInformationRevenue$base["revenue",]<-data.frame(distribution="const",
																											 lower=revenueConst,
																											 upper=revenueConst,
																											 row.names="revenue",
																											 stringsAsFactors=FALSE)
# (a) A list with one element
prospectiveEstimate<-list(perfectInformationRevenue=perfectInformationRevenue)
# Calculate the Expected Value of Information:
eviSimulationResult<-eviSimulation(model=profit,
																	 currentEstimate=currentEstimate,
																	 prospectiveEstimate=prospectiveEstimate,
																	 numberOfSimulations=numberOfSimulations,
																	 functionSyntax="data.frameNames")
# Show the simulation results:
print(summary(eviSimulationResult))
#############################################################
# (b) A list with two elements
perfectInformationCosts<-currentEstimate
costsConst<-mean(c(currentEstimate$base["costs","lower"],currentEstimate$base["costs","upper"]))
perfectInformationCosts$base["costs",]<-data.frame(distribution="const",
																									 lower=costsConst,
																									 upper=costsConst,
																									 row.names="costs",
																									 stringsAsFactors=FALSE)
prospectiveEstimate<-list(perfectInformationRevenue=perfectInformationRevenue,
													perfectInformationCosts=perfectInformationCosts)
# Calculate the Expected Value of Information:
eviSimulationResult<-eviSimulation(model=profit,
																	 currentEstimate=currentEstimate,
																	 prospectiveEstimate=prospectiveEstimate,
																	 numberOfSimulations=numberOfSimulations,
																	 functionSyntax="data.frameNames")
# Show the simulation results:
print(summary(eviSimulationResult))
#############################################################
# Example 3 A list of prospective estimates and two decsion variables:
#############################################################
numberOfSimulations=10000
# Create the current estimate object:
variable=c("revenue","costs")
distribution=c("posnorm","posnorm")
lower=c(10000,  5000)
upper=c(100000, 50000)
currentEstimate<-estimate(variable, distribution, lower, upper)
# Create a list of two prospective estimates:
perfectInformationRevenue<-currentEstimate
revenueConst<-mean(c(currentEstimate$base["revenue","lower"],currentEstimate$base["revenue","upper"]))
perfectInformationRevenue$base["revenue",]<-data.frame(distribution="const",
																											 lower=revenueConst,
																											 upper=revenueConst,
																											 row.names="revenue",
																											 stringsAsFactors=FALSE)
perfectInformationCosts<-currentEstimate
costsConst<-mean(c(currentEstimate$base["costs","lower"],currentEstimate$base["costs","upper"]))
perfectInformationCosts$base["costs",]<-data.frame(distribution="const",
																									 lower=costsConst,
																									 upper=costsConst,
																									 row.names="costs",
																									 stringsAsFactors=FALSE)
prospectiveEstimate<-list(perfectInformationRevenue=perfectInformationRevenue,
													perfectInformationCosts=perfectInformationCosts)
# Define the model function with two decsion variables:
decisionModel<-function(x){
	list(Profit=x$revenue-x$costs,
			 Costs=-x$costs)
}
# Calculate the Expected Value of Information:
eviSimulationResult<-eviSimulation(model=decisionModel,
																	 currentEstimate=currentEstimate,
																	 prospectiveEstimate=prospectiveEstimate,
																	 numberOfSimulations=numberOfSimulations,
																	 functionSyntax="data.frameNames")
# Show the simulation results:
print(sort(summary(eviSimulationResult)),decreasing=TRUE,along="Profit")
}
\seealso{
\code{\link{welfareDecisionAnalysis}}, \code{\link{mcSimulation}}, \code{\link{estimate}}
}

